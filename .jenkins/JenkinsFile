VERSION_NUMBER = ""
VERSION_PREFIX = "1.0"

DOCKER_IMAGE_NAME = 'vercruyssetim/chat-vdab'
JENKINS_NPM_NAME = "jenkins_app_npm"

/*********** Build workflow ***********/
try {
    stage("pre-steps") {
        node("linux && docker") {
            cleanWorkspace()
            cloneProject()
            determineVersionNumber()
        }
    }

    stage("build") {
        node("linux && docker") {
            buildNpmImage()
            npm("test")
            archiveAllTestResults()
        }
    }

    stage("deploy") {
        node("linux && docker") {

            sh "docker push $DOCKER_IMAGE_NAME:$VERSION_NUMBER"
        }
    }

    stage("deploy to Test") {
        milestone 1
        askForDeploy('Deploy to Test?')
        milestone 2
        node("linux && docker") {
            ssh "jenkins@DL01103V.ops.vdab.be " +
                    "'cd chat-vdab && " +
                    "docker rmi $DOCKER_IMAGE_NAME && " +
                    "docker run -p 3000:3000 -v application.properties:/usr/src/app/application.properties $DOCKER_IMAGE_NAME'"
        }
    }

} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException exception) {
    currentBuild.result = 'SUCCESS'
    return
}

/********** Helper functions **********/
def askForDeploy(message) {
    timeout(time: 28, unit: 'DAYS') {
        input message: "${message}"
    }
}

def cleanWorkspace() {
    sh "mkdir ~/.tmp/${env.BUILD_TAG}"
    try {
        sh "sudo mv mentor-app/node_modules ~/.tmp/${env.BUILD_TAG}/node_modules"
        sh "sudo mv mentor-app/yarn.lock ~/.tmp/${env.BUILD_TAG}/yarn.lock"
    } catch (err) {
    }
    sh "sudo rm -rf mentor-app/*"
    try {
        sh "mkdir -p mentor-app/src"
        sh "sudo mv ~/.tmp/${env.BUILD_TAG}/node_modules/ mentor-app/node_modules"
        sh "sudo mv ~/.tmp/${env.BUILD_TAG}/yarn.lock mentor-app/yarn.lock"
    } catch (err) {
    }
    sh "rm -rf ~/.tmp/${env.BUILD_TAG}"
}

def cloneProject() {
    checkout scm
}

def determineVersionNumber() {
    sh "git rev-list --count HEAD > nb-commits.txt"
    def nbCommits = readFile("nb-commits.txt").trim()
    VERSION_NUMBER = "${VERSION_PREFIX}.${nbCommits}"
}

def archiveAllTestResults() {
    step([$class: 'CheckStylePublisher', pattern: 'test-reports/eslint/checkstyle-result.xml', unstableTotalAll: '0', usePreviousBuildAsReference: true])
    step([$class: "JUnitResultArchiver", testResults: "test-reports/mocha/test-results_mocha.xml"])
}

def buildNpmImage() {
    sh "docker build -t $DOCKER_IMAGE_NAME:$VERSION_NUMBER -t $DOCKER_IMAGE_NAME:latest ."
}

def npm(task) {
    def npmName = "${JENKINS_NPM_NAME}.${VERSION_NUMBER}"

    try {
        startNpmContainer(npmName)
        execNpmContainer(npmName, task)
    } catch (err) {
        printError(err)
        currentBuild.result = "FAILURE"
    } finally {
        removeContainer(npmName)
    }
}

def startNpmContainer(npmName) {
    def currentDir = pwd()
    killContainer(npmName)
    sh "docker run -t -d --name ${npmName} -v $currentDir/test-reports:/usr/src/app/test-reports chat-vdab bash"
}

def execNpmContainer(npmName, task) {
    sh "docker exec ${npmName} npm run ${task} --no-color"
}

/********** Docker functions **********/
def killContainer(name) {
    try {
        sh "docker rm -vf ${name} || true"
    } catch (err) {
    }
}

def removeContainer(name) {
    try {
        sh "docker stop ${name}"
    } catch (err) {
    }
    try {
        sh "docker rm -v ${name} || true"
    } catch (err) {
    }
}

def printError(error) {
    println "******************************* WORKFLOW ERROR *******************************"
    println "${error}"
    println "******************************************************************************"
}
